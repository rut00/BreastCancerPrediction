# -*- coding: utf-8 -*-
"""Breast Cancer Detection using SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19EDhcvH_xiKpjp3shbgoZwKTh_soEkEP

In this project, classifying tumors into malignant (cancer) or benign (healthy).
Here, the features are computed from a digitized image of a breast mass which describe characteristics of the cell nuclei present in the image.

**Importing Necessary libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()

"""X = input values/independent variable/ mean texture, """

dataframe_cancer = pd.DataFrame(np.c_[cancer['data'], cancer['target']], columns = np.append(cancer['feature_names'], ['target']))
dataframe_cancer.head()

"""**Visualize the Data**"""

sns.pairplot(dataframe_cancer, hue = 'target', vars = ['mean radius', 'mean texture', 'mean perimeter', 'mean area',	'mean smoothness'])

"""

*   Orange (1.0) = Benign i.e. no cancer
*   Blue (0.0) = Malignant i.e. cancer


"""

X = dataframe_cancer.drop(['target'], axis = 1)
X.head()

Y = dataframe_cancer['target']
Y.head()

"""**Training and Testing Dataset**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 22)

print("Training dataset of X", X_train.shape)
print("Training dataset of Y", Y_train.shape)
print("Training dataset of X", X_test.shape)
print("Training dataset of Y", X_test.shape)

"""**Create SVM Model**"""

from sklearn.svm import SVC

svm_model = SVC()

svm_model.fit(X_train, Y_train)

"""**Predicting Data**"""

Y_predict = svm_model.predict(X_test)

"""A confusion maxtrix for binary classification task:


"""

from sklearn.metrics import confusion_matrix, classification_report
cm = np.array(confusion_matrix(Y_test, Y_predict, labels=[1,0]))
confusion = pd.DataFrame(cm, index=['is_cancer','is_healthy'], columns=['predicted_cancer', 'predicted_healthy'])
confusion

sns.heatmap(confusion, cmap = 'YlGnBu', annot = True)

print(classification_report(Y_test, Y_predict))

"""**Normalise Data**"""

X_train_min = X_train.min()
X_train_max = X_train.max()
X_train_range = X_train_max - X_train_min
X_train_scaled = (X_train - X_train_min)/X_train_range
X_train_scaled.head()

X_test_min = X_test.min()
X_test_max = X_test.max()
X_test_range = X_test_max - X_test_min
X_test_scaled = (X_test - X_test_min)/X_test_range
X_test_scaled.head()

"""**Prediction Based on Normalised/Scaled Data**"""

svm_model = SVC()
svm_model.fit(X_train_scaled, Y_train)

Y_predict = svm_model.predict(X_test_scaled)
cm = np.array(confusion_matrix(Y_test, Y_predict, labels=[1,0]))
confusion = pd.DataFrame(cm, index=['is_cancer','is_healthy'], columns=['predicted_cancer', 'predicted_healthy'])
confusion
sns.heatmap(confusion, cmap = 'YlGnBu', annot = True)
print(classification_report(Y_test, Y_predict))